{% extends 'admin/layout.twig' %}

{% block customstyles %}

<style>
  .image-browser-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.7);
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal-content {
    background: #fff;
    width: 90%;
    max-width: 800px;
    max-height: 90%;
    overflow-y: auto;
    border-radius: 8px;
    padding: 20px;
    position: relative;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .close-btn {
    background: transparent;
    border: none;
    font-size: 24px;
    cursor: pointer;
  }

  .image-grid, .folder-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 15px;
  }

  .folder-item, .image-item {
    padding: 10px;
    background: #f4f4f4;
    border: 1px solid #ccc;
    cursor: pointer;
    text-align: center;
  }

  .image-item img {
    max-width: 100px;
    height: auto;
    display: block;
  }
</style>

{% endblock %}

{% block title %}{{ page ? 'Edit' : 'New' }} Page {% endblock %}

{% block content %}
    <!-- Main content wrapper -->
    <div class="wrapper">
        <!-- Form -->
        <form class="form" action="{{ page.id is defined ? ('/admin/page/edit/' ~ page.id) : ('/admin/pages/create') }}" method="post" enctype="multipart/form-data">

            <input type="hidden" name="{{ csrf.token_name_key }}" value="{{ csrf.token_name }}">
            <input type="hidden" name="{{ csrf.token_value_key }}" value="{{ csrf.token_value }}">

            <fieldset>
                <div class="widget">
                    <div class="title">
                        <img src="/assets/backend/default_images/icons/dark/list.png" alt="" class="titleIcon"><h6>{{ page ? 'Edit' : 'New' }} Page </h6>
                    </div>
                    <div class="formRow">
                        <label>{{trans('post_title')}}</label>
                        <div class="formRight">
                            <input type="text" name="title" id="title" value="{{ page.title | default('') }}" required>
                        </div>
                    </div>
                    <div class="formRow">
                        <label for="labelFor">{{trans('post_description')}}</label>
                        <div class="formRight">
                            <textarea name="content" id="content-editor">{{ page.content | default('') }}</textarea>
                        </div>
                    </div>

                    <div class="formRow">
                        <label>{{trans('page_parent')}}</label>
                        <div class="formRight">
                            <select class="form-control fh5co_text_select_option" name="page_parent">
                                <option value="">Select Option</option>
                                {% for p in pages %}


                                <option value="{{ p.id }}" {% if page and p.id is same as page.id %} selected {% endif %}>{{ p.title }}</option>
                                    >{{ p.title }}</option>

                                {% endfor %}
                            </select>
                        </div>
                    </div>
                    <div class="formRow">
                    <button type="submit">{{ page ? 'Update' : 'Create' }} Page</button>
                    </div>

                </div>
            </fieldset>
        </form>

    </div>

<!-- TinyMCE Integration -->
<script src="/assets/frontend/js/tinymce/tinymce.min.js"></script>

<script type="text/javascript">

  var lang = {
    en: {
      uploadImageTooltip: "Upload Image",
      boldTooltip: "Bold Text",
      italicTooltip: "Italic Text",
      // Add more tooltips as needed
    },
    fr: {
      uploadImageTooltip: "Télécharger l'image",
      boldTooltip: "Texte en gras",
      italicTooltip: "Texte en italique",
      // Add more tooltips as needed
    }
  };
  var userLanguage = 'fr';

  // Inject the CSRF token directly from Twig into the JavaScript variable
  var csrfTokenKey = "{{ csrf.token_name_key }}";
  var csrfTokenKeyValue = "{{ csrf.token_name }}";
  // Inject the CSRF token directly from Twig into the JavaScript variable
  var csrfTokenValueKey = "{{ csrf.token_value_key }}";
  var csrfTokenValueValue = "{{ csrf.token_value }}";

  // Ensure TinyMCE is initialized when the page loads
  window.onload = function() {
    tinymce.init({
      selector: '#content-editor', // The textarea you want to turn into TinyMCE
      language: userLanguage, // Default language can be set to English
      language_url: '../../assets/backend/js/fr.js', // Path to the French language pack
      plugins: [
        'advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview',
        'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',
        'insertdatetime', 'media', 'table', 'help', 'wordcount', 'directionality',
        'noneditable', 'visualchars', 'paste', 'contextmenu'

      ],
      // Alternative simplified version
      toolbar: 'uploadimage | formatselect | table | fontfamily fontsizeinput | \
              pastetext | bold italic underline | \
              alignleft aligncenter alignright alignjustify | \
              forecolor bullist numlist indent outdent | \
              charmap link unlink anchor image | \
              undo redo removeformat searchreplace code preview help',
      // Add font_formats to customize available fonts
      font_formats: 'Arial=arial,helvetica,sans-serif;' +
            'Arial Black=arial black,avant garde;' +
            'Book Antiqua=book antiqua,palatino;' +
            'Comic Sans MS=comic sans ms,sans-serif;' +
            'Courier New=courier new,courier;' +
            'Georgia=georgia,palatino;' +
            'Helvetica=helvetica;' +
            'Impact=impact,chicago;' +
            'Symbol=symbol;' +
            'Tahoma=tahoma,arial,helvetica,sans-serif;' +
            'Terminal=terminal,monaco;' +
            'Times New Roman=times new roman,times;' +
            'Trebuchet MS=trebuchet ms,geneva;' +
            'Verdana=verdana,geneva;' +
            'Webdings=webdings;' +
            'Wingdings=wingdings,zapf dingbats',
            // Custom file browser setup
      file_picker_callback: function(callback, value, meta) {
        if (meta.filetype === 'image') {
            // Open custom file browser
            openImageBrowser(callback);
        }
      },
      // Other configurations...
      image_dimensions: false,
      image_class_list: [
        {title: 'Responsive', value: 'img-fluid'}
      ],
      // Configure available formats in the format selector
      formats: {
          // Headings
        h1: { block: 'h1' },
        h2: { block: 'h2' },
        h3: { block: 'h3' },
        h4: { block: 'h4' },
        h5: { block: 'h5' },
        h6: { block: 'h6' },
        // Blocks
        paragraph: { block: 'p' },
        div: { block: 'div' },
        // Other formats as needed
      },

      // Configure which formats appear in the format dropdown
      block_formats: 'Paragraph=p; Heading 1=h1; Heading 2=h2; Heading 3=h3; Heading 4=h4; Heading 5=h5; Heading 6=h6',

      // Add fontsize_formats to customize available font sizes
      fontsize_formats: '8pt 10pt 12pt 14pt 16pt 18pt 24pt 36pt 48pt',
      height: 400,
      menubar: true,
      statusbar: true,
      branding: false,
      promotion: false,
      setup: function(editor) {
        // Set the content from the backend (Twig variable)
        editor.on('init', function() {
          editor.setContent(`{{ page.content | default('') | escape('js') }}`);
        });

         // Add custom "Upload Image" button
        editor.ui.registry.addButton('uploadimage', {
          text: 'Upload Image',
          icon: 'upload',
          onAction: function() {
            const input = document.createElement('input');
            input.setAttribute('type', 'file');
            input.setAttribute('accept', 'image/*');
            input.click();

            input.onchange = function() {
              const file = this.files[0];
              const formData = new FormData();
              formData.append('image', file);

               // Get the CSRF token from the page (make sure it is available)
              formData.append(csrfTokenKey, csrfTokenKeyValue);
              formData.append(csrfTokenValueKey, csrfTokenValueValue);

              fetch('/admin/upload-image', { // Your backend upload endpoint
                method: 'POST',
                body: formData
              })
              .then(response => response.json())
              .then(data => {
                // Insert the uploaded image into the editor
                editor.insertContent(`<img src="${data.url}" alt="${file.name}" />`);
              })
              .catch(err => {
                alert('Upload failed');
                console.error(err);
              });
            };
          }
        });

        // Custom tooltip for Bold button (example)
        editor.ui.registry.addButton('bold', {
          tooltip: lang[userLanguage].boldTooltip, // Set the tooltip text for the "Bold" button
          icon: 'bold',
          onAction: function() {
            editor.execCommand('bold');
          }
        });

        // Custom tooltip for Italic button (example)
        editor.ui.registry.addButton('italic', {
          tooltip: lang[userLanguage].italicTooltip, // Set the tooltip text for the "Italic" button
          icon: 'italic',
          onAction: function() {
            editor.execCommand('italic');
          }
        });

      }
    });
  };

  /**
  ====================================================================
  ====================================================================
  ====================================================================
  ====================================================================
  ====================================================================
  **/
  let imageBrowserModal = null;

  function openImageBrowser(callback) {
    // Remove existing modal if it exists
    if (imageBrowserModal) {
      document.body.removeChild(imageBrowserModal);
      imageBrowserModal = null;
    }

    // Create the modal container
    imageBrowserModal = document.createElement('div');
    imageBrowserModal.className = 'image-browser-modal';
    imageBrowserModal.innerHTML = `
      <div class="modal-content">
        <div class="modal-header">
          <h3>Select Image</h3>
          <button class="close-btn">&times;</button>
        </div>
        <div class="modal-body">
          <div class="upload-section">
            <input type="text" id="newFolder" placeholder="New folder (optional)" />
            <select id="existingFolder"></select>
            <input type="file" id="imageFile" />
            <button id="uploadBtn">Upload</button>
          </div>
          <hr>
          <div class="image-grid" id="imageGrid"><p>Loading folders...</p></div>
        </div>
      </div>
    `;
    document.body.appendChild(imageBrowserModal);

    const imageGrid = imageBrowserModal.querySelector('#imageGrid');

    // Load folders and display them
    function loadFolders() {
      fetch('/admin/get-image-folders')
        .then(res => res.json())
        .then(folders => {
          const existingFolderSelect = document.getElementById('existingFolder');
          existingFolderSelect.innerHTML = '<option value="">--Select existing--</option>';

          folders.forEach(folder => {
            const option = document.createElement('option');
            option.value = folder;
            option.textContent = folder;
            existingFolderSelect.appendChild(option);
          });

          imageGrid.innerHTML = '';
          folders.forEach(folder => {
            const folderDiv = document.createElement('div');
            folderDiv.className = 'folder-item';
            folderDiv.textContent = folder;
            folderDiv.onclick = () => loadImagesInFolder(folder);
            imageGrid.appendChild(folderDiv);
          });
        });
    }

    // Load images from selected folder
    function loadImagesInFolder(folderName) {
      imageGrid.innerHTML = `<p>Loading images from <strong>${folderName}</strong>...</p>`;
      fetch(`/admin/get-images/${encodeURIComponent(folderName)}`)
        .then(res => res.json())
        .then(images => {
          imageGrid.innerHTML = `<h4>${folderName}</h4><button id="backBtn">← Back to folders</button>`;
          const folderGrid = document.createElement('div');
          folderGrid.className = 'folder-grid';

          images.forEach(image => {
            const div = document.createElement('div');
            div.className = 'image-item';
            div.innerHTML = `<img src="${image.url}" alt="${image.name}">`;
            div.onclick = () => {
              callback(image.url);
              closeModal();
            };
            folderGrid.appendChild(div);
          });

          imageGrid.appendChild(folderGrid);

          document.getElementById('backBtn').onclick = loadFolders;
        });
    }

    // Close modal
    function closeModal() {
      if (imageBrowserModal) {
        document.body.removeChild(imageBrowserModal);
        imageBrowserModal = null;
      }
    }

    // Attach close event
    imageBrowserModal.querySelector('.close-btn').onclick = closeModal;



  document.getElementById('uploadBtn').onclick = () => {
    const fileInput = document.getElementById('imageFile');
    const selectedFile = fileInput.files[0];
    if (!selectedFile) {
      alert("Please select an image to upload.");
      return;
    }

    const newFolder = document.getElementById('newFolder').value.trim();
    const existingFolder = document.getElementById('existingFolder').value;
    const folder = newFolder || existingFolder;

    if (!folder) {
      alert("Please specify or select a folder.");
      return;
    }

    const formData = new FormData();
    formData.append('image', selectedFile);
    formData.append('folder', folder);
    // Get the CSRF token from the page (make sure it is available)
    formData.append(csrfTokenKey, csrfTokenKeyValue);
    formData.append(csrfTokenValueKey, csrfTokenValueValue);


    fetch('/admin/upload-images', {
      method: 'POST',
      body: formData
    })
      .then(res => res.json())
      .then(result => {
        alert("Image uploaded!");
        loadImagesInFolder(folder);
      })
      .catch(err => {
        console.error(err);
        alert("Failed to upload image.");
      });
  };

    // Start by loading folders
    loadFolders();
  }

</script>

{% endblock %}
