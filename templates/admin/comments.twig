{% extends 'admin/layout.twig' %}

{% block title %}{{ trans('comments') }}{% endblock %}

{% block content %}
    <!-- Main content wrapper -->
    <div class="wrapper">

        <!-- Dynamic table -->
        <div class="widget">
            <div class="title"><h6>{{trans('users_list')}}</h6></div>
            <table class="display dTable">
                <thead>
                <tr>
                    <th>{{trans('article_title')}}</th>
                    <th>{{trans('comment')}}</th>
                    <th>{{trans('comment_publisher')}}</th>
                    <th>{{trans('comment_published_date')}}</th>
                    <th>{{trans('action')}}</th>
                </tr>
                </thead>
                <tbody>
                {% for comment in comments %}
                    <tr class="gradeX">
                        <td>{{comment.article_title}}</td>
                        <td>{{comment.comment_text}}</td>
                        <td>{{comment.publisher  }}</td>
                        <td>{{comment.comment_date|date("F j, Y") }}</td>
                        <td class="center" style="border-left-color: rgb(203, 203, 203);">
                            <button>
                                <a href="#" class="tm-color-primary small edit-comment-link">{{ trans('edit') }}</a>
                            </button>
                            <form action="/comments/{{ comment.id }}/delete" method="POST" style="display: inline;">

                                <input type="hidden" name="{{ csrf.token_name_key }}" value="{{ csrf.token_name }}">
                                <input type="hidden" name="{{ csrf.token_value_key }}" value="{{ csrf.token_value }}">
                                <button type="submit" class="tm-color-primary small delete-comment-link" onclick="return confirm('Are you sure you want to delete this article?');">Delete</button>
                            </form>
                        </td>
                    </tr>
                {% endfor %}

                </tbody>
            </table>
        </div>

    </div>

    <script>
        {% if is_admin %}
          document.addEventListener('DOMContentLoaded', () => {
            let csrfNameKey = '{{ csrf.token_name_key }}';
            let csrfValueKey = '{{ csrf.token_value_key }}';
            let csrfName = '{{ csrf.token_name }}';
            let csrfValue = '{{ csrf.token_value }}';

            document.querySelectorAll('.edit-comment-link').forEach(button => {
              button.addEventListener('click', (e) => {
                e.preventDefault();
                const commentDiv = e.target.closest('.tm-comment');
                commentDiv.querySelector('.tm-comment-text').style.display = 'none';
                commentDiv.querySelector('.edit-comment-link').style.display = 'none';
                commentDiv.querySelector('.edit-comment-form').style.display = 'block';
              });
            });

            document.querySelectorAll('.cancel-edit-btn').forEach(button => {
              button.addEventListener('click', (e) => {
                e.preventDefault();
                const commentDiv = e.target.closest('.tm-comment');
                commentDiv.querySelector('.tm-comment-text').style.display = 'block';
                commentDiv.querySelector('.edit-comment-link').style.display = 'inline';
                commentDiv.querySelector('.edit-comment-form').style.display = 'none';
              });
            });

            document.querySelectorAll('.save-comment-btn').forEach(button => {
              button.addEventListener('click', async (e) => {
                e.preventDefault();
                const commentDiv = e.target.closest('.tm-comment');
                const commentId = commentDiv.dataset.commentId;
                const commentText = commentDiv.querySelector('textarea[name="comment_text"]').value;

                const createFormData = () => {
                  const formData = new FormData();
                  formData.append('comment_text', commentText);
                  formData.append(csrfNameKey, csrfName);
                  formData.append(csrfValueKey, csrfValue);
                  return formData;
                };

                const sendRequest = async (url, formData) => {
                  return await fetch(url, {
                    method: 'POST',
                    headers: {
                      'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: formData
                  });
                };

                let response = await sendRequest(`/comments/${commentId}/update`, createFormData());

                if (response.ok) {
                  const updatedComment = await response.json();
                  commentDiv.querySelector('.tm-comment-text').textContent = updatedComment.comment_text;
                  commentDiv.querySelector('.tm-comment-text').style.display = 'block';
                  commentDiv.querySelector('.edit-comment-link').style.display = 'inline';
                  commentDiv.querySelector('.edit-comment-form').style.display = 'none';
                } else {
                  const responseData = await response.json();
                  alert(responseData.error || 'Failed to update the comment. Please try again.');
                }
              });
            });

            document.querySelectorAll('.delete-comment-link').forEach(button => {
              button.addEventListener('click', async (e) => {
                e.preventDefault();
                const commentDiv = e.target.closest('.tm-comment');
                const commentId = commentDiv.dataset.commentId;

                if (!confirm('Are you sure you want to delete this comment?')) {
                  return;
                }

                const createFormData = () => {
                  const formData = new FormData();
                  formData.append(csrfNameKey, csrfName);
                  formData.append(csrfValueKey, csrfValue);
                  return formData;
                };

                const sendRequest = async (url, formData) => {
                  return await fetch(url, {
                    method: 'POST',
                    headers: {
                      'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: formData
                  });
                };

                let response = await sendRequest(`/comments/${commentId}/delete`, createFormData());

                if (response.ok) {
                  commentDiv.remove();
                } else {
                  const responseData = await response.json();
                  alert(responseData.error || 'Failed to delete the comment. Please try again.');
                }
              });
            });
          });
        {% endif %}
</script>

{% endblock %}



