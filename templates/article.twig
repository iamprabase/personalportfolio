{% extends 'layout.twig' %}

{% block title %}{{ article.title }}{% endblock %}

{% block content %}
<article>
    <h2>{{ article.title }}</h2>
    <p><em>Published on {{ article.publication_date|date("F j, Y") }}</em></p>
    <div>
        {{ article.content|raw }}
    </div>
</article>

<section class="comments">
    <h3>Comments</h3>
    {% for comment in comments %}
        <div class="comment" data-comment-id="{{ comment.id }}">
            <p><strong>{{ comment.username }}</strong> said on {{ comment.comment_date|date("F j, Y g:i a") }}:</p>
            <p class="comment-text">{{ comment.comment_text }}</p>
            {% if comment.user_id == current_user_id or is_admin %}
                <button class="edit-comment-btn">Edit</button>
                <form class="edit-comment-form" style="display: none;" method="POST">
                    <textarea name="comment_text">{{ comment.comment_text }}</textarea>
                    <button type="button" class="save-comment-btn">Save</button>
                    <button type="button" class="cancel-edit-btn">Cancel</button>
                </form>

                <a href="/comments/{{ comment.id }}/delete" class="delete-comment-btn">Delete</a>
            {% endif %}
        </div>
    {% else %}
        <p>No comments yet. Be the first to comment!</p>
    {% endfor %}

    <form action="/comments/{{ article.id }}/store" method="POST">
        <h4>Leave a Comment</h4>        
        <input type="hidden" name="{{ csrf.token_name_key }}" value="{{ csrf.token_name }}">
        <input type="hidden" name="{{ csrf.token_value_key }}" value="{{ csrf.token_value }}">

        {% if error %}
            <p class="error">{{ error }}</p>
        {% endif %}
        
        <label for="comment_text">Comment:</label>
        <textarea id="comment_text" name="comment_text" required></textarea>
        
        <button type="submit">Submit Comment</button>
    </form>
</section>

<script>
document.addEventListener('DOMContentLoaded', () => {
    let csrfNameKey = '{{ csrf.token_name_key }}';
    let csrfValueKey = '{{ csrf.token_value_key }}';
    let csrfName = '{{ csrf.token_name }}';
    let csrfValue = '{{ csrf.token_value }}';

    document.querySelectorAll('.edit-comment-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const commentDiv = e.target.closest('.comment');
        commentDiv.querySelector('.comment-text').style.display = 'none';
        commentDiv.querySelector('.edit-comment-btn').style.display = 'none';
        commentDiv.querySelector('.edit-comment-form').style.display = 'block';
      });
    });

    document.querySelectorAll('.cancel-edit-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const commentDiv = e.target.closest('.comment');
        commentDiv.querySelector('.comment-text').style.display = 'block';
        commentDiv.querySelector('.edit-comment-btn').style.display = 'inline';
        commentDiv.querySelector('.edit-comment-form').style.display = 'none';
      });
    });

    document.querySelectorAll('.save-comment-btn').forEach(button => {
        button.addEventListener('click', async (e) => {
            const commentDiv = e.target.closest('.comment');
            const commentId = commentDiv.dataset.commentId;
            const commentText = commentDiv.querySelector('textarea[name="comment_text"]').value;

            const createFormData = () => {
              const formData = new FormData();
              formData.append('comment_text', commentText);
              formData.append(csrfNameKey, csrfName);
              formData.append(csrfValueKey, csrfValue);

              return formData;
            };

            const sendRequest = async (url, formData) => {
              return await fetch(url, {
                  method: 'POST',
                  headers: {
                      'X-Requested-With': 'XMLHttpRequest'
                  },
                  body: formData
              });
            };

            let response = await sendRequest(`/comments/${commentId}/update`, createFormData());

            if (response.ok) {
                const updatedComment = await response.json();

                commentDiv.querySelector('.comment-text').textContent = updatedComment.comment_text;
                commentDiv.querySelector('.comment-text').style.display = 'block';
                commentDiv.querySelector('.edit-comment-btn').style.display = 'inline';
                commentDiv.querySelector('.edit-comment-form').style.display = 'none';
            } 
            else if (response.status === 403 || !response.ok) {
              const response = await response.json();

              alert(response.error);
            } 
        });
    });

    document.querySelectorAll('.delete-comment-btn').forEach(button => {
        button.addEventListener('click', async (e) => {
            e.preventDefault();
            const commentDiv = e.target.closest('.comment');
            const commentId = commentDiv.dataset.commentId;

            if (!confirm('Are you sure you want to delete this comment?')) {
                return;
            }

            const createFormData = () => {
                const formData = new FormData();
                formData.append(csrfNameKey, csrfName);
                formData.append(csrfValueKey, csrfValue);

                return formData;
            };

            const sendRequest = async (url, formData) => {
                return await fetch(url, {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: formData
                });
            };

            let response = await sendRequest(`/comments/${commentId}/delete`, createFormData());

            if (response.ok) {
                commentDiv.remove();
            } else if (response.status === 403 || !response.ok) {
                const responseData = await response.json();
                alert(responseData.error || 'Failed to delete the comment. Please try again.');
            }
        });
    });
});
</script>

<a href="/">Back to Articles</a>
{% endblock %}
